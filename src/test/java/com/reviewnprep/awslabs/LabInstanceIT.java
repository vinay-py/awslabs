package com.reviewnprep.awslabs;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.reviewnprep.awslabs.dto.LabDto;
import com.reviewnprep.awslabs.dto.LabInstanceDto;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import javax.transaction.Transactional;

import java.time.LocalDate;
import java.time.LocalTime;

import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.mockmvc.RestDocumentationRequestBuilders.get;
import static org.springframework.restdocs.payload.PayloadDocumentation.*;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@AutoConfigureRestDocs
@Transactional
public class LabInstanceIT {
    @Autowired
    MockMvc mockMvc;

    @Autowired
    ObjectMapper objectMapper;

    @BeforeEach
    public void setup() throws Exception {
        LabDto labDto;
        String stackLocation = "https://vinaypy-cf-templates.s3.us-east-2.amazonaws.com/CreateMFALabGroup.json";

        labDto = new LabDto("MFALab", "Set up MFA in AWS IAM", stackLocation);

        mockMvc
            .perform(
                post("/lab")
                    .content(objectMapper.writeValueAsString(labDto))
                    .contentType(MediaType.APPLICATION_JSON)
            );
    }

    @Test
    public void addLabInstance() throws Exception {
        LabInstanceDto labInstanceDto = new LabInstanceDto("MFALab", 900);

        mockMvc
            .perform(post("/labInstance")
            .contentType(MediaType.APPLICATION_JSON)
            .content(objectMapper.writeValueAsString(labInstanceDto)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.status").value(HttpStatus.CREATED.getReasonPhrase()))
            .andExpect(jsonPath("$.status_code").value(HttpStatus.CREATED.value()))
            .andExpect(jsonPath("$.data.labName").value("MFALab"))
            .andExpect(jsonPath("$.data.labInstanceId").isNumber())
            .andDo(
                document(
                    "Create-LabInstance",
                    requestFields(
                        fieldWithPath("labInstanceId").description("Lab Instance Id")
                        ,fieldWithPath("labName").description("Lab Name")
                        ,fieldWithPath("stackName").description("AWS Stack will be created with this name")
                        ,fieldWithPath("userName").description("User name will be generated by Cloudformation and returned in this field")
                        ,fieldWithPath("durationInSeconds").description("Lab will remain open for this duration (Min 15 minutes)")
                        ,fieldWithPath("createDate").description("Lab Create Date")
                        ,fieldWithPath("createTime").description("Lab Create Time")
                        ,fieldWithPath("active").description("Status of the Lab Instance")
                    ),
                    responseFields(
                        fieldWithPath("status").description("Return the http status description")
                        ,fieldWithPath("status_code").description("Return the http status code")
                        ,fieldWithPath("status_message").description("Return Lab creation status message")
                        ,fieldWithPath("data").description("Return the created Lab Object")
                        ,fieldWithPath("data.labInstanceId").description("Lab Instance Id")
                        ,fieldWithPath("data.labName").description("Lab Name")
                        ,fieldWithPath("data.stackName").description("AWS Stack will be created with this name")
                        ,fieldWithPath("data.userName").description("User name will be generated by Cloudformation and returned in this field")
                        ,fieldWithPath("data.durationInSeconds").description("Lab will remain open for this duration (Min 15 minutes)")
                        ,fieldWithPath("data.createDate").description("Lab Create Date")
                        ,fieldWithPath("data.createTime").description("Lab Create Time")
                        ,fieldWithPath("data.durationInSeconds").description("Lab Instance Duration in Seconds")
                        ,fieldWithPath("data.active").description("Status of the Lab Instance")
                    )
                )
            )
        ;

    }

    @Test
    public void getZeroLabInstances() throws Exception{
        mockMvc
            .perform(
                get("/labInstance"))
            .andExpect(jsonPath("$.status").value("OK"))
            .andExpect(jsonPath("$.status_code").value(200))
            .andExpect(jsonPath("$.data.length()").value(0))
            .andDo(
                document(
                    "Get-Zero-Labs-Instances",
                    responseFields(
                        fieldWithPath("status").description("Return the http status description"),
                        fieldWithPath("status_code").description("Return the http status code"),
                        fieldWithPath("status_message").description("status message"),
                        fieldWithPath("data").description("List of All Lab Instances"))));
    }
}
